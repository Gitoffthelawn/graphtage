# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  binaries:

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ] # windows-latest,

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools pyinstaller
          pip install .
      - name: Build the binary
        run: |
          make -C bindist
          echo 'dist_file<<EOF' >> $GITHUB_ENV
          make -C bindist dist-name | tr -d '\n' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: publish
        run: |
          echo "The path is ${{ env.dist_file }}"
#        if: |
#          github.event.release && matrix.compiler.CC == 'clang'
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: ${{ env.dist_file }}
#          asset_name: ubuntu.${{ matrix.build-shared.repr }}.${{ matrix.build-type }}.zip
#          asset_content_type: application/zip


  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools
        pip install .[dev]
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 graphtage test --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 graphtage test --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test building documentation
      run: |
        cd docs
        make html
    - name: Test with pytest
      run: |
        pip install pytest
        pytest
